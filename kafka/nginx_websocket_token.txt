Để lấy token session từ Redis, bạn cần sử dụng một công cụ kết nối và truy vấn dữ liệu từ Redis trong script Lua của Nginx. Một trong những thư viện phổ biến để làm điều này là OpenResty, một bản phân phối mở rộng của Nginx hỗ trợ viết các script Lua.

Dưới đây là một ví dụ cấu hình Nginx sử dụng OpenResty và Redis để lấy token session từ Redis và thực hiện kiểm tra trước khi tiếp tục bypass tới WebSocket service:


http {
  upstream websocket_backend {
    server localhost:8080;
    # Thêm các server backend khác nếu cần
  }

  server {
    listen 80;
    server_name your-domain.com;

    # Cấu hình cho OpenResty và Redis
    lua_package_path "/path/to/lua-resty-redis/lib/?.lua;;";
    lua_code_cache on;

    init_by_lua_block {
      local resty_redis = require "resty.redis"
      local redis = resty_redis:new()

      -- Kết nối tới Redis
      redis:connect("redis_host", redis_port)

      -- Thiết lập passphrase (nếu cần thiết)
      -- redis:auth("password")
      
      -- Lưu Redis instance trong biến toàn cục để sử dụng lại trong các yêu cầu tiếp theo
      ngx.shared.redis = redis
    }

    location /login {
      # Không cần kiểm tra session, do đây là trang đăng nhập
      root /path/to/static/html/files;
      
      try_files $uri $uri/ =404;
    }
    
    location /public {
      # Không cần kiểm tra session, do đây là thư mục chứa các file tĩnh công khai
      root /path/to/static/html/files;
      
      try_files $uri $uri/ =404;
    }

    location / {
      # Kiểm tra token session cho các file HTML khác ngoài /login và /public
      root /path/to/static/html/files;
      
      access_by_lua_block {
        local session_token = ngx.var.cookie_token
        local redis = ngx.shared.redis
 
        -- Truy vấn token session từ Redis
        local redis_key = "session:" .. session_token
        local res, err = redis:get(redis_key)

        if res == ngx.null then
          -- Token session không hợp lệ, từ chối yêu cầu
          return ngx.exit(ngx.HTTP_FORBIDDEN)
        end
      }

      try_files $uri $uri/ =404;
    }

    location /spring-websocket-portfolio/portfolio {
      access_by_lua_block {
        local session_token = ngx.var.cookie_token
        local redis = ngx.shared.redis

        -- Truy vấn token session từ Redis
        local redis_key = "session:" .. session_token
        local res, err = redis:get(redis_key)

        if res == ngx.null then
          -- Token session không hợp lệ, từ chối yêu cầu
          return ngx.exit(ngx.HTTP_FORBIDDEN)
        else
          ngx.req.set_header("Upgrade", "websocket")
          ngx.req.set_header("Connection", "upgrade")
          ngx.req.clear_header("cookie")
        end
      }

      proxy_pass http://websocket_backend;  # Sử dụng upstream đã khai báo
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
    }
  }
}
