vatr = ATR(100);

redBar = Close < Open;
greenBar = Close > Open;
body = abs(Close - Open);
total = High - Low;
bodyTopLoc = Max(Open, Close);
bodyBottomLoc = Min(Open, Close);
shadowTop = High - bodyTopLoc;
shadowBottom = bodyBottomLoc - Low;
fallingBars = (Cum(1) - Cum(greenBar));
risingBars = (Cum(1) - Cum(redBar)); 

function percent (x, y) {
    z = x * 100 / y;
    z;
    return z;
};

//CUSTOMIZE THESE ONLY
SizeBottom = vatr / 10; //Smallest size, anything less is a DOJI
SSizeBottom = vatr / 8; //Small bottom size, used for short candles
SSizeTop = vatr / 3; //Small top size, used for short candles
NSizeBottom = vatr / 3; //Normal bottom size, used for normal candles
NSizeTop = vatr * 1.1; //Normal top size, used for normal candles
LSizeBottom = vatr * 1.1; //Long bottom size, used for LONG candles
LSizeTop = vatr * 6; //Long Top size, candles longer than this will be IGNORED
doji = (body < SizeBottom and percent(body, total) < 25); //DOJI
sBody = (body > SSizeBottom and body < SSizeTop); //SMALL BODY
nBody = (body > NSizeBottom and body < NSizeTop); //NORMAL BODY
lBody = (body > LSizeBottom and body < LSizeTop); //LONG BODY

function sGap(x, y) {
    return abs(x - y) < SSizeBottom and abs(x - y) > SSizeBottom / 2;
};

function nGap(x, y) {
    return abs(x - y) > SSizeBottom and abs(x - y) < LSizeBottom / 2;
};

function lGap(x, y) {
    return abs(x - y) > LSizeBottom / 2;
};

function VSShadow(x) {
    return percent(x, total) < 15;
};

function SShadow(x) {
    return percent(x, total) > 15 and percent(x, total) < 30;
};

function LShadow(x) {
    return percent(x, total) > 70;
};

SUpTrend = Close > EMA(Close, 6); //SHORT UPTREND, used in retracement calculations and such
LUpTrend = Close > EMA(Close, 25); //LONG UPTREND
SPeak = HighestBars(25); //PEAK OF SHORT UPTREND
LPeak = HighestBars(50); //PEAK OF LONG UPTREND
SDownTrend = Close < EMA(Close, 6); //SHORT DOWNTREND, used in retracement calculations and such
LDownTrend = Close < EMA(Close, 25); //LONG DOWNTREND
SBottom = LowestBars(25); //PEAK OF SHORT DOWNTREND
LBottom = LowestBars(50); //PEAK OF LONG DOWNTREND

//END CUSTOMIZE
lowPercDiffFall = ((Close - Low) * 100) / (Open - Low);
lowPercDiffRise = ((Open - Low) * 100) / (Close - Low);
highPercDiffFall = ((High - Open) * 100 / (High - Close));
highPercDiffRise = ((High - Close) * 100 / (High - Open));

// A. BULLISH SIGNALS
//DragonflyDoji
DragonflyDoji = (doji and LShadow(shadowBottom) and VSShadow(shadowTop) and total > NSizeBottom and total < LSizeTop and ((LUpTrend and SDownTrend) or (LDownTrend)));
//Harmer
Hammer = (sBody and LShadow(shadowBottom) and VSShadow(shadowTop) and total > LSizeBottom and total < LSizeBottom * 2 and ((LUpTrend and SDownTrend) or (LDownTrend)));
//TAKURI LINE
Takuri = (sBody and LShadow(shadowBottom) and VSShadow(shadowTop) and total > LSizeBottom * 2 and ((LUpTrend and SDownTrend) or (LDownTrend)));
//BULLISH BELT HOLD
BBelt = ((nBody or lBody) and Open <= Low[1] and Low == Open and (VSShadow(shadowTop) or SShadow(shadowTop)) and ((LUpTrend and SDownTrend) OR (LDownTrend))) ;
//BULLISH ENGULFING
BullEngulf = ((sBody[1] or nBody[1]) and redBar[1] and Close > Open[1] and Open < Close[1] and not (VSShadow(shadowTop) or VSShadow(shadowBottom)) and greenBar and ((LUpTrend and SDownTrend) OR (LDownTrend))); //
//HARAMI CROSS BULLISH
HCBull = (doji and redBar[1] and High < Open[1] and Low > Close[1] and SBottom[1] == 0 and LUpTrend and (sGap(Low, Close[1]) or nGap(Low, Close[1])));
//HARAMI BULLISH
HBull = (not doji and redBar[1] and greenBar and High < Open[1] and Low > Close[1] and SBottom[1] == 0 and ((LUpTrend and SDownTrend) OR (LDownTrend)) and not (abs(High - High[1]) < SSizeBottom and abs(Low - Low[1]) < SSizeBottom) and not (VSShadow(shadowTop) or VSShadow(shadowBottom)) and (sGap(Low, Close[1]) or nGap(Low, Close[1])));
//INVERTED HAMMER BULLISH
IHammer = (sBody and LShadow(shadowTop) and VSShadow(shadowBottom) and total > LSizeBottom and total < LSizeBottom * 2 and ((LUpTrend and SDownTrend) OR (LDownTrend) ));
//PIERCING LINE
PLine = ((nBody[1] or lBody[1]) and (nBody or lBody) and redBar[1] and greenBar and Close >= ((Body[1] * 50 / 100) + bodyBottomLoc[1]) and Close < Open[1] and nGap(Open, Close[1]) and nGap(Open, Close[2]) and ((LUpTrend and SDownTrend) OR (LDownTrend)));
//BULLISH DOJI STAR
BDojiStar = (doji and redBar[1] and Open < Close[1] and nGap(Open, Close[1]) and ((LUpTrend and SDownTrend) OR (LDownTrend)));
//BULLISH MEETING LINES
BMeetLine = ((nBody[2] or lBody[2]) and (nBody[1] or lBody[1]) and redBar[2] and greenBar[1] and greenBar and abs(Close[2] - Close[1]) < SizeBottom and ((LUpTrend and SDownTrend) OR (LDownTrend)) and VSShadow(shadowTop[2]) and VSShadow(shadowBottom[1]) and Close > Open[1]);
//BULLISH HOMING PIGEON
HPigeon = (not doji and redBar[1] and redBar and High < Open[1] and Low > Close[1] and ((LUpTrend and SDownTrend) OR (LDownTrend)) and not (abs(High - High[1]) < SSizeBottom and abs(Low - Low[1]) < SSizeBottom) and not (VSShadow(shadowTop) or VSShadow(shadowBottom)) and (sGap(Low, Close[1]) or nGap(Low, Close[1])));
//BULLISH MATCHING LOW
BMatchLow = ((nBody[2] or sBody[2]) and (nBody[1] or sBody[1]) and redBar[2] and redBar[1] and greenBar and abs(Close[2] - Close[1]) < SizeBottom and ((LUpTrend and SDownTrend) OR (LDownTrend)) and VSShadow(shadowTop[1]) and VSShadow(shadowTop[2]) and Close > Open[1]);
//KICKER PATTERN
Kicker = (High[1] < Open and lGap(High[1], Open) and greenBar and lBody and (SDownTrend or LDownTrend) and Volume >= MA(Volume, 50));
//ABANDONED BABY
ABaby = ((doji[1] or sBody[1]) and SDownTrend[1] and redBar[2] and (nBody[2] or lBody[2]) and greenBar and (nBody or lBody) and High[1] <= Low[2] and Low >= High[1] and Close >= ((Body[2] * 40 / 100) + bodyBottomLoc[2]) and (sGap(Low[2], High[1]) or nGap(Low[2], High[1]) or lGap(Low[2], High[1])) and (sGap(Low, High[1]) or nGap(Low, High[1]) or lGap(Low, High[1])));
//MORNING STAR
MStar = ((doji[1] or sBody[1]) and SDownTrend[1] and redBar[2] and (nBody[2] or lBody[2]) and greenBar and (nBody or lBody) and Open[1] <= Close[2] and Close[1] <= Close[2] and Open >= Close[1] and Close >= ((Body[2] * 40 / 100) + bodyBottomLoc[2]));
//BULLISH TRI STAR
BullTriStar = (doji[1] and doji[2] and doji and LUpTrend[1] and Open[1] <= Close[2] and Close[1] <= Close[2] and Open >= Close[1]);
//BULLISH DOWNSIDE GAP TWO RABBITS
BullDownTwoRabb = (((LUpTrend and SDownTrend) OR (LDownTrend)) and redBar[2] and (nBody[2] or lBody[2]) and greenBar[1] and greenBar and (nBody[1] or sBody[1]) and (nBody or lBody) and (sGap(Close[2], Open[1]) or nGap(Close[2], Open[1])) and (sGap(Close[1], Open) or nGap(Close[1], Open)) and Close[2] > Open[1] and Close[1] > Open);
//BULLISH UNIQUE THREE RIVER BOTTOM
BullUnThreeRiver = (((LUpTrend and SDownTrend) OR (LDownTrend)) and (nBody[2] or lBody[2]) and redBar[2] and redBar[1] and greenBar and Open[1] > Close[2] and Close[1] < Close[2] and Low[1] > Low[2] and (nBody[1] or sBody[1]) and (sGap(Close[2], Open[1]) or nGap(Close[2], Open[1])) and not VSShadow(shadowBottom) and sBody and Open < Close[1] and (sGap(Close[1], Open) or nGap(Close[1], Open)));
//THREE WHITE SOLDIERS
TGSol = ((nBody[2] or lBody[2]) and (nBody[1] or lBody[1]) and (nBody or lBody) and greenBar[2] and greenBar[1] and greenBar and Close[2] < Close[1] and Close[1] < Close and High[2] < High[1] and High[1] < High and Open[1] <= Close[2] and Open <= Close[1] and VSShadow(shadowTop[2]) and VSShadow(shadowTop[1]) and VSShadow(shadowTop));
//BULLISH DESCENT BLOCK
BullDescBlock = ((nBody[2] or lBody[2]) and (nBody[1] or lBody[1]) and (nBody or lBody) and redBar[2] and redBar[1] and redBar and Close[2] > Close[1] and Close[1] > Close and Open[1] >= Close[2] and Open >= Close[1] and (not VSShadow(shadowBottom[1]) or SShadow(shadowBottom[1])) and (not VSShadow(shadowBottom[1]) or SShadow(shadowBottom[1])) and Body < Body[1]);
//BULLISH DELIBERATION BLOCK
BullDeliBlock = (((LUpTrend and SDownTrend) OR (LDownTrend)) and (nBody[2] or lBody[2]) and (nBody[1] or lBody[1]) and (sBody or doji) and redBar[2] and redBar[1] and redBar and Close[2] > Close[1] and Close[1] > Close and Open[1] >= Close[2] and (sGap(Open, Close[1]) or nGap(Open, Close[1])) and Open < Close);
// BULLISH DELIBERATION
Deliberation = (NOT LDownTrend AND (nBody[2] OR lBody[2]) AND (nBody[1] OR lBody[1]) AND (sBody OR doji) AND greenBar[2] AND greenBar[1] AND greenBar AND close[2] < close[1] AND close[1] < close AND open[1] <= close[2] AND (sGap(open, close[1]) OR nGap(open, close[1])) AND open > close);
// BULLISH TWO RABBITS
TwoRabbits = (LUpTrend AND (nBody[2] OR lBody[2]) AND redBar[2] AND open[1] < close[2] AND greenBar[1] AND greenBar AND (nBody[1] OR sBody[1]) AND (nBody OR lBody) AND (sGap(open[1], close[2]) OR nGap(open[1], close[2]) OR lGap(open[1], close[2])) AND open <= close[1] AND close >= ((body[2] * 15 / 100) + bodyBottomLoc[2]));

// B. BEARIST SIGNALS
// INVERTED HAMMER
//IHammer2 = (sBody AND LShadow(shadowTop) AND VSShadow(shadowBottom) AND total > LSizeBottom AND total < LSizeBottom*2 AND LDownTrend);
IHammer2 = (sBody AND LShadow(shadowTop) AND VSShadow(shadowBottom) AND total > LSizeBottom AND total < LSizeBottom*2 AND ((LDownTrend and SUpTrend) or (LUpTrend)));
// BULLISH DOJI STAR
BDojiStar2 = (doji AND redBar[1] AND open < close[1] AND nGap(open, close[1]) AND ((LDownTrend and SUpTrend) or (LUpTrend)));
// BULLISH MATCHING LOW
BMatchLow2 = ((nBody[1] OR sBody[1]) AND (nBody OR sBody) AND redBar[1] AND redBar AND ABS(close[1] - close) < SizeBottom AND ((LDownTrend and SUpTrend) or (LUpTrend)) AND VSShadow(shadowTop[1]) AND VSShadow(shadowTop));
// BULLISH HOMING PIGEON
HPigeon2 = (NOT doji AND redBar[1] AND redBar AND high < open[1] AND low > close[1] AND ((LDownTrend and SUpTrend) or (LUpTrend)) AND NOT (ABS(high - high[1]) < SSizeBottom AND ABS(low - low[1]) < SSizeBottom) AND NOT (VSShadow(shadowTop) OR VSShadow(shadowBottom)) AND (sGap(low, close[1]) OR nGap(low, close[1])));
// BULLISH UNIQUE THREE RIVER BOTTOM
BullUnThreeRiver2 = (((LDownTrend and SUpTrend) or (LUpTrend)) AND (nBody[2] OR lBody[2]) AND redBar[2] AND redBar[1] AND greenBar AND open[1] > close[2] AND close[1] < close[2] AND low[1] > low[2] AND (nBody[1] OR sBody[1]) AND (sGap(close[2], open[1]) OR nGap(close[2], open[1])) AND NOT VSShadow(shadowBottom) AND sBody AND open < close[1] AND (sGap(close[1], open) OR nGap(close[1], open)));
// BULLISH DELIBERATION BLOCK
BullDeliBlock2 = (NOT LUpTrend AND (nBody[2] OR lBody[2]) AND (nBody[1] OR lBody[1]) AND (sBody OR doji) AND redBar[2] AND redBar[1] AND redBar AND close[2] > close[1] AND close[1] > close AND open[1] >= close[2] AND (sGap(open, close[1]) OR nGap(open, close[1])) AND open < close);
// DELIBERATION
Deliberation2 = (((LDownTrend AND SUpTrend) or (LUpTrend)) AND (nBody[2] OR lBody[2]) AND (nBody[1] OR lBody[1]) AND (sBody OR doji) AND greenBar[2] AND greenBar[1] AND greenBar AND close[2] < close[1] AND close[1] < close AND open[1] <= close[2] AND (sGap(open, close[1]) OR nGap(open, close[1])) AND open > close);
// THREE LINE STRIKE
TLS = (Close[1] < Close[2] AND Close[2] < Close[3] AND Open[3] > Close[3] AND Close > High[3] AND ((LDownTrend AND SUpTrend) or (LUpTrend)));
// TWO BLACK GAPPING MODIFIED
TwoBGap = (Close < Close[1] AND Close[1] < Close[2] AND Close[2] < Close[3] AND LPeak[3] == 0 AND High[2] < High[3] AND Open[2] - Close[1] > (Close[3] - Open[3]) * 3 AND Open[3] < Close[3] AND Close[3] - Open[3] > vatr[3]  AND ((LDownTrend AND SUpTrend) or (LUpTrend)));
// THREE BLACK CROWS
TBC = (LPeak[2] >= -1 AND Close < Close[1] AND Close[1] < Close[2] AND Low < Low[1] AND Low[1] < Low[2] AND LowPercDiffFall < 45 AND LowPercDiffFall[1] < 45 AND LowPercDiffFall[2] < 45 AND ((LDownTrend AND SUpTrend) or (LUpTrend)));
// EVENING STAR
EStar = ((Doji[1] OR sBody[1]) AND LPeak[1] == 0 AND (Close[2] - Open[2]) > vatr[2] * 1.25 AND ((redBar AND Open - Close < vatr / 2) OR HighPercDiffFall > 30 OR HighPercDiffRise > 50) AND Close < (Close[2] - ((Close[2] - Open[2]) * 34 / 100)) AND redBar AND High[1] - Low[1] < vatr / 1.5 AND ((LDownTrend AND SUpTrend) or (LUpTrend)));
// BEARISH ISLAND REVERSAL
BearIR = (High[2] < Open[1] AND Open[1] - High[2] > vatr[1] / 3 AND ABS(Close[1] - Open[1]) < vatr[1] / 8 AND Close[1] > High AND Close[1] - High > vatr / 3 AND Volume[1] >= MA(Volume, 50) / 2 AND ((LDownTrend AND SUpTrend) or (LUpTrend))); 
// BULLISH ISLAND REVERSAL
BullIR = (Low[2] > Open[1] AND Low[2] - Open[1] > vatr[1] / 3 AND ABS(Close[1] - Open[1]) < vatr[1] / 8 AND Close[1] < Low AND High - Close[1] > vatr / 3 AND Volume[1] >= MA(Volume, 50) / 2 AND ((LDownTrend AND SUpTrend) or (LUpTrend)));
// BEARISH HOOK REVERSAL
BearHR = (redBar AND greenBar[1] AND High[1] - Open < vatr / 6 AND Low > Low[1] AND High < High[1] AND Low - Low[1] < vatr / 4 AND Volume >= MA(Volume, 50) / 2 AND SPeak[1] == 0 AND ABS(Close[1] - Open[1]) > vatr / 3 AND Close - Open[1] < vatr / 6 AND Close[1] - Open < vatr / 6 AND ((LDownTrend AND SUpTrend) or (LUpTrend)));
// BULLISH HOOK REVERSAL
BullHR = (greenBar AND redBar[1] AND Open - Low[1] < vatr / 6 AND Low > Low[1] AND High < High[1] AND High[1] - High < vatr / 4 AND Volume >= MA(Volume, 50) / 2 AND SBottom[1] == 0 AND ABS(Close[1] - Open[1]) > vatr / 3 AND Open[1] - Close < vatr / 6 AND Open - Close[1] < vatr / 6  AND ((LDownTrend AND SUpTrend) or (LUpTrend)));
// SAN KU Pattern
SanKuBear = (greenBar AND Close[1] > Open[1] AND Close[2] > Open[2] AND Open[1] - Close[2] > vatr / 6 AND Open - Close[1] > vatr / 6 AND ABS(Close[2] - Open[2]) > vatr / 7 AND ABS(Close[1] - Open[1]) > vatr / 7 AND Body > vatr / 7 AND ((LDownTrend AND SUpTrend) or (LUpTrend)));
SanKuBull = (redBar AND Close[1] < Open[1] AND Close[2] < Open[2] AND Close[2] - Open[1] > vatr / 6 AND Close[1] - Open > vatr / 6 AND ABS(Close[2] - Open[2]) > vatr / 7 AND ABS(Close[1] - Open[1]) > vatr / 7 AND Body > vatr / 7 AND ((LDownTrend AND SUpTrend) or (LUpTrend)));
// HARAMI CROSS BEARISH
HCBear = (Doji AND High < Close[1] AND Low > Open[1] AND Close[1] > Open[1] AND SPeak[1] == 0 AND ((LDownTrend AND SUpTrend) or (LUpTrend)));
// GRAVESTONE DOJI
Gravestone = (Doji AND (Max(Open, Close) - Low) / (High - Low) < 0.25 AND High - Low > vatr / 2 AND ((LDownTrend AND SUpTrend) or (LUpTrend)));
// SHOOTING STAR
SStar = (sBody AND ShadowBottom / (High - Low) < 0.15 AND ShadowTop / (High - Low) > 0.7 AND SPeak[1] == 0 AND redBar AND High - Low > vatr * 1.25 AND ((LDownTrend AND SUpTrend) or (LUpTrend)));
// HANGING MAN
Hanging = (sBody AND ShadowBottom / (High - Low) > 0.7 AND ShadowTop / (High - Low) < 0.15 AND SPeak[1] == 0 AND Open >= Close[1] AND ((LDownTrend AND SUpTrend) or (LUpTrend)));
// Upside Gap Two Crows
UpsideGapTwoCrows = (greenBar[2] AND redBar[1] AND redBar AND Body[2] > vatr[2] AND Open[1] >= Close[2] AND sBody[1] AND Open >= Open[1] AND Close < Close[1] AND Close > Close[2] AND Body > vatr / 1.5 AND ((LDownTrend AND SUpTrend) or (LUpTrend)));
// DARK CLOUD COVER
DarkCC = (Body[1] > vatr[1] / 2 AND Body > vatr / 2 AND Open >= Close[1] AND Close < (Open[1] + Close[1]) / 2 AND Close > Open[1] AND redBar AND ((LDownTrend AND SUpTrend) or (LUpTrend)));
// BEARISH ENGULFING
BearEngulf = ((sBody[1] OR Doji[1]) AND LPeak[1] == 0 AND Body > vatr * 1.15 AND redBar AND Close < Low[1] AND ShadowBottom / (High - Low) < 0.1 AND ((LDownTrend AND SUpTrend) or (LUpTrend)));
// CANDLESTICK SANDWICH
CSandwich = (((nBody[2] AND nBody[1] AND nBody) OR ((lBody[2] AND lBody[1] AND lBody))) AND redBar[2] AND greenBar[1] AND redBar AND ABS(Close - Close[2]) < vatr / 6 AND ABS(Open - Open[2]) < vatr / 6 AND ((LDownTrend AND SUpTrend) or (LUpTrend)));